---

- name: Test if requested version is already installed
  lineinfile:
    path: "{{ nextcloud_install_dir }}/version.php"
    line: "$OC_VersionString = '{{ nextcloud_version }}';"
    state: present
  # only check if line would be added (when not present yet)
  check_mode: true
  # ingore errors, like when file doesn't exist yet
  ignore_errors: true
  register: has_version

- name: Set variable to determine if update/install needed
  set_fact:
    nextcloud_needs_install: "{{ has_version.changed|bool }}"

- set_fact:
    nextcloud_needs_install: true
  when: has_version.failed

- name: Output if install needed
  debug:
    var: nextcloud_needs_install

- name: Download Nextcloud version {{ nextcloud_version }}
  get_url:
    url: 'https://download.nextcloud.com/server/releases/nextcloud-{{ nextcloud_version }}.zip'
    dest: '/tmp/nextcloud.zip'
  when: nextcloud_needs_install

- name: Unzip Nextcloud package (contains nextcloud dir)
  unarchive:
    src: /tmp/nextcloud.zip
    dest: /tmp/
    remote_src: true
  when: nextcloud_needs_install

- name: Make sure Nextcloud parent dir exists
  file:
    path: '{{ nextcloud_install_dir | dirname }}'
    state: directory
  when: nextcloud_needs_install

- name: Move unzipped nextloud dir to install dir
  command: 'mv /tmp/nextcloud {{ nextcloud_install_dir }}'
  when: nextcloud_needs_install

- name: Move unzipped nextloud dir to install dir
  command: 'chown {{ nextcloud_user }}:{{ nextcloud_group }} -R {{ nextcloud_install_dir }}'
  when: nextcloud_needs_install

- name: Cleanup install files
  file:
    path: /tmp/nextcloud.zip
    state: absent

- name: Setup Nextcloud Data dir (for storing uploaded files) with Ngxinx permissions
  file:
    path: '{{ nextcloud_data_dir }}'
    state: directory
    owner: "{{ nextcloud_user }}"
    group: "{{ nextcloud_group }}"

- name: Run OCC install task for initial Nextcloud setup
  shell:
    cmd: |
      sudo -u {{ nextcloud_user }} php{{ nextcloud_php_version }} occ maintenance:install \
      --database "{{ nextcloud_db_type }}" \
      --database-host "{{ nextcloud_db_host }}" \
      --database-port "{{ nextcloud_db_port }}" \
      --database-name "{{ nextcloud_db_name }}" \
      --database-user "{{ nextcloud_db_user }}" \
      --database-pass "{{ nextcloud_db_pass }}" \
      --data-dir "{{ nextcloud_data_dir }}" \
      --admin-user "{{ nextcloud_initial_user_name }}" \
      --admin-pass "{{ nextcloud_initial_user_pw }}"
    chdir: "{{ nextcloud_install_dir }}"
    creates: "{{ nextcloud_install_dir }}/config/config.php"
  register: occ_install_result
  when: not nextcloud_restore_config|bool

- name: OCC install debug out
  debug:
    var: occ_install_result.stdout
  when: not nextcloud_restore_config|bool

- name: Run OCC command to add trusted domain
  shell:
    cmd: sudo -u {{ nextcloud_user }} php{{ nextcloud_php_version }} occ config:system:set trusted_domains 0 --value {{ nextcloud_domain }}
    chdir: "{{ nextcloud_install_dir }}"
  register: occ_domain_result
  when: not nextcloud_restore_config|bool

- name: OCC trusted domain debug out
  debug:
    var: occ_domain_result.stdout

- name: Restore Nextcloud config.php to settings from role vars
  template:
    src: nextcloud-config.php.j2
    dest: "{{ nextcloud_install_dir }}/config/config.php"
    mode: 0640
    owner: root
    group: root
  when: nextcloud_restore_config|bool

- name: Setup Nextcloud Cron trigger (every 5 minutes)
  cron:
    name: 'nextcloud-cron-trigger'
    job: 'php{{ nextcloud_php_version }} -f {{ nextcloud_install_dir }}/cron.php'
    user: '{{ nextcloud_user }}'
    minute: '*/5'
    state: present
